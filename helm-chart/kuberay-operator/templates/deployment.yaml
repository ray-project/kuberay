apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kuberay-operator.deployment.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kuberay-operator.labels" . | nindent 4 }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "kuberay-operator.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "kuberay-operator.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: {{ include "kuberay-operator.component" . }}
        {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ include "kuberay-operator.image" . }}
        {{- with .Values.image.pullPolicy }}
        imagePullPolicy: {{ . }}
        {{- end }}
        command:
        - {{ .Values.operatorCommand }}
        args:
        {{- $featureGates := list }}
        {{- range $featureGate := .Values.featureGates }}
        {{- $featureGates = append $featureGates (printf "%s=%t" $featureGate.name $featureGate.enabled) }}
        {{- end }}
        {{- with $featureGates }}
        - --feature-gates={{ . | join "," }}
        {{- end }}
        {{- if .Values.batchScheduler.enabled }}
        - --enable-batch-scheduler
        {{- end }}
        {{- with .Values.batchScheduler.name }}
        - --batch-scheduler={{ . }}
        {{- end }}
        {{- $namespaces := list }}
        {{- if and .Values.singleNamespaceInstall (not .Values.watchNamespace) }}
        {{- $namespaces = append $namespaces .Release.Namespace }}
        {{- else if .Values.watchNamespace }}
        {{- $namespaces = concat $namespaces .Values.watchNamespace }}
        {{- end }}
        {{- with $namespaces }}
        - --watch-namespace={{ . | join "," }}
        {{- end }}
        {{- if and .Values.logging.baseDir .Values.logging.fileName }}
        - --log-file-path={{ printf "%s/%s" .Values.logging.baseDir .Values.logging.fileName }}
        {{- end }}
        {{- with .Values.logging.stdoutEncoder }}
        - --log-stdout-encoder={{ . }}
        {{- end }}
        {{- with .Values.logging.fileEncoder }}
        - --log-file-encoder={{ . }}
        {{- end }}
        - --use-kubernetes-proxy={{ .Values.useKubernetesProxy }}
        - --enable-leader-election={{ .Values.leaderElectionEnabled }}
        - --enable-metrics={{ .Values.metrics.enabled }}
        {{- with .Values.env }}
        env:
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and (.Values.logging.baseDir) (.Values.logging.fileName) }}
        volumeMounts:
        - name: kuberay-logs
          mountPath: "{{ .Values.logging.baseDir }}"
        {{- end }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /metrics
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if and (.Values.logging.baseDir) (.Values.logging.fileName) }}
      volumes:
      - name: kuberay-logs
        {{- if .Values.logging.sizeLimit }}
        emptyDir:
          sizeLimit: {{ .Values.logging.sizeLimit }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "kuberay-operator.serviceAccount.name" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
