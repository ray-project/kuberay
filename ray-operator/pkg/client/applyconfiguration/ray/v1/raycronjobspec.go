// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	rayv1 "github.com/ray-project/kuberay/ray-operator/apis/ray/v1"
)

// RayCronJobSpecApplyConfiguration represents a declarative configuration of the RayCronJobSpec type for use
// with apply.
type RayCronJobSpecApplyConfiguration struct {
	Schedule          *string                               `json:"schedule,omitempty"`
	ConcurrencyPolicy *rayv1.ConcurrencyPolicy              `json:"concurrencyPolicy,omitempty"`
	Suspend           *bool                                 `json:"suspend,omitempty"`
	RayJobTemplate    *RayJobTemplateSpecApplyConfiguration `json:"rayJobTemplate,omitempty"`
}

// RayCronJobSpecApplyConfiguration constructs a declarative configuration of the RayCronJobSpec type for use with
// apply.
func RayCronJobSpec() *RayCronJobSpecApplyConfiguration {
	return &RayCronJobSpecApplyConfiguration{}
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithSchedule(value string) *RayCronJobSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithConcurrencyPolicy sets the ConcurrencyPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConcurrencyPolicy field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithConcurrencyPolicy(value rayv1.ConcurrencyPolicy) *RayCronJobSpecApplyConfiguration {
	b.ConcurrencyPolicy = &value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspend field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithSuspend(value bool) *RayCronJobSpecApplyConfiguration {
	b.Suspend = &value
	return b
}

// WithRayJobTemplate sets the RayJobTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RayJobTemplate field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithRayJobTemplate(value *RayJobTemplateSpecApplyConfiguration) *RayCronJobSpecApplyConfiguration {
	b.RayJobTemplate = value
	return b
}
