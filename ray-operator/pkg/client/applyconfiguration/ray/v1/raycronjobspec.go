// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	batchv1 "k8s.io/api/batch/v1"
)

// RayCronJobSpecApplyConfiguration represents a declarative configuration of the RayCronJobSpec type for use
// with apply.
type RayCronJobSpecApplyConfiguration struct {
	Schedule                   *string                       `json:"schedule,omitempty"`
	TimeZone                   *string                       `json:"timeZone,omitempty"`
	StartingDeadlineSeconds    *int64                        `json:"startingDeadlineSeconds,omitempty"`
	ConcurrencyPolicy          *batchv1.ConcurrencyPolicy    `json:"concurrencyPolicy,omitempty"`
	Suspend                    *bool                         `json:"suspend,omitempty"`
	RayJobTemplate             *RayJobSpecApplyConfiguration `json:"rayJobTemplate,omitempty"`
	SuccessfulJobsHistoryLimit *int32                        `json:"successfulJobsHistoryLimit,omitempty"`
	FailedJobsHistoryLimit     *int32                        `json:"failedJobsHistoryLimit,omitempty"`
}

// RayCronJobSpecApplyConfiguration constructs a declarative configuration of the RayCronJobSpec type for use with
// apply.
func RayCronJobSpec() *RayCronJobSpecApplyConfiguration {
	return &RayCronJobSpecApplyConfiguration{}
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithSchedule(value string) *RayCronJobSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithTimeZone sets the TimeZone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TimeZone field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithTimeZone(value string) *RayCronJobSpecApplyConfiguration {
	b.TimeZone = &value
	return b
}

// WithStartingDeadlineSeconds sets the StartingDeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartingDeadlineSeconds field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithStartingDeadlineSeconds(value int64) *RayCronJobSpecApplyConfiguration {
	b.StartingDeadlineSeconds = &value
	return b
}

// WithConcurrencyPolicy sets the ConcurrencyPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConcurrencyPolicy field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithConcurrencyPolicy(value batchv1.ConcurrencyPolicy) *RayCronJobSpecApplyConfiguration {
	b.ConcurrencyPolicy = &value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspend field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithSuspend(value bool) *RayCronJobSpecApplyConfiguration {
	b.Suspend = &value
	return b
}

// WithRayJobTemplate sets the RayJobTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RayJobTemplate field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithRayJobTemplate(value *RayJobSpecApplyConfiguration) *RayCronJobSpecApplyConfiguration {
	b.RayJobTemplate = value
	return b
}

// WithSuccessfulJobsHistoryLimit sets the SuccessfulJobsHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuccessfulJobsHistoryLimit field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithSuccessfulJobsHistoryLimit(value int32) *RayCronJobSpecApplyConfiguration {
	b.SuccessfulJobsHistoryLimit = &value
	return b
}

// WithFailedJobsHistoryLimit sets the FailedJobsHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailedJobsHistoryLimit field is set to the value of the last call.
func (b *RayCronJobSpecApplyConfiguration) WithFailedJobsHistoryLimit(value int32) *RayCronJobSpecApplyConfiguration {
	b.FailedJobsHistoryLimit = &value
	return b
}
