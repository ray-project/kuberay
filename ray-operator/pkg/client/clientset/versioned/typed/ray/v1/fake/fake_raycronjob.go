// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/ray-project/kuberay/ray-operator/apis/ray/v1"
	rayv1 "github.com/ray-project/kuberay/ray-operator/pkg/client/applyconfiguration/ray/v1"
	typedrayv1 "github.com/ray-project/kuberay/ray-operator/pkg/client/clientset/versioned/typed/ray/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeRayCronJobs implements RayCronJobInterface
type fakeRayCronJobs struct {
	*gentype.FakeClientWithListAndApply[*v1.RayCronJob, *v1.RayCronJobList, *rayv1.RayCronJobApplyConfiguration]
	Fake *FakeRayV1
}

func newFakeRayCronJobs(fake *FakeRayV1, namespace string) typedrayv1.RayCronJobInterface {
	return &fakeRayCronJobs{
		gentype.NewFakeClientWithListAndApply[*v1.RayCronJob, *v1.RayCronJobList, *rayv1.RayCronJobApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("raycronjobs"),
			v1.SchemeGroupVersion.WithKind("RayCronJob"),
			func() *v1.RayCronJob { return &v1.RayCronJob{} },
			func() *v1.RayCronJobList { return &v1.RayCronJobList{} },
			func(dst, src *v1.RayCronJobList) { dst.ListMeta = src.ListMeta },
			func(list *v1.RayCronJobList) []*v1.RayCronJob { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.RayCronJobList, items []*v1.RayCronJob) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
